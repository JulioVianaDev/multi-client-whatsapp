### WhatsApp Bridge API Examples
### This file contains examples for all API endpoints

### ========================================
### INSTANCE MANAGEMENT
### ========================================

### 1. Create a new WhatsApp instance
POST http://localhost:4444/instance/create
Content-Type: application/json

###

### 2. Connect an instance (replace {instance_key} with actual key)
POST http://localhost:4444/instance/connect
Content-Type: application/json

{
  "instance_key": "2bf67527efcda4665c9b12c80b2c3bb4"
}

###

### 3. Get QR code for an instance (replace {instance_key})
GET http://localhost:4444/instance/2bf67527efcda4665c9b12c80b2c3bb4/qr

###

### 4. Check instance status (replace {instance_key})
GET http://localhost:4444/instance/d16f13e303743ac61ec80821f4fc2c9e/status

###

### 5. List all instances
GET http://localhost:4444/instances

###

### 6. Disconnect an instance (replace {instance_key})
POST http://localhost:4444/instance/abc123def456/disconnect
Content-Type: application/json

###

### ========================================
### MESSAGE SENDING (Go Service)
### ========================================

### 7. Send text message via Go service
POST http://localhost:4444/message/send
Content-Type: application/json

{
  "instance_key": "62e123dfa3b859c5d29cb803257c69e5",
  "phone": "16174658484@s.whatsapp.net",
  "message": "Hello from WhatsApp jean! ðŸš€",
  "reply_to": ""
}

###

### 8. Send image message via Go service
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://picsum.photos/400/300",
  "type": "image",
  "caption": "Check out this beautiful image! ðŸ“¸"
}

###

### 9. Send audio message via Go service
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://www.soundjay.com/misc/sounds/bell-ringing-05.wav",
  "type": "audio"
}

###

### 10. Send video message via Go service
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4",
  "type": "video",
  "caption": "Check out this video! ðŸŽ¥"
}

###

### 11. Send document/file via Go service
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
  "type": "file"
}

###

### 12. Send contact via Go service
POST http://localhost:4444/message/send-contact
Content-Type: application/json

{
  "instance_key": "34f9808f029b2651764376cab09f8913",
  "phone": "16174658484@s.whatsapp.net",
  "contact_name": "Tomate",
  "contact_phone": "5512988053918@s.whatsapp.net"
}

###

### 13. Send voice recording via Go service
POST http://localhost:4444/message/send-voice
Content-Type: application/json

{
  "instance_key": "2bf67527efcda4665c9b12c80b2c3bb4",
  "phone": "16174658484@s.whatsapp.net",
  "url": "https://base3.easychannel.online/assets/medias/attendances/9df40033-1a07-4a9b-9ab8-138d2daea67a.mp3"
}

###

### 14. Send audio file (not voice recording) via Go service
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "2bf67527efcda4665c9b12c80b2c3bb4",
  "phone": "16174658484@s.whatsapp.net",
  "url": "https://base3.easychannel.online/assets/medias/attendances/9df40033-1a07-4a9b-9ab8-138d2daea67a.mp3",
  "type": "audio",
  "is_ptt": false
}

###

### 15. Send voice recording as audio with PTT flag via Go service
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "34f9808f029b2651764376cab09f8913",
  "phone": "16174658484@s.whatsapp.net",
  "url": "https://example.com/voice.ogg",
  "type": "audio",
  "is_ptt": true
}

###

### ========================================
### NODE.JS PROXY ENDPOINTS
### ========================================

### 19. Send text message via Node.js proxy
POST http://localhost:5555/message/send
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "message": "Hello from Node.js proxy! ðŸ”„",
  "reply_to": "optional_message_id_to_reply_to"
}

###

### 20. Send image message via Node.js proxy
POST http://localhost:5555/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://picsum.photos/400/300",
  "type": "image",
  "caption": "Image sent via Node.js proxy! ðŸ“¸"
}

###

### 21. Send audio message via Node.js proxy
POST http://localhost:5555/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://www.soundjay.com/misc/sounds/bell-ringing-05.wav",
  "type": "audio"
}

###

### 22. Send video message via Node.js proxy
POST http://localhost:5555/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4",
  "type": "video",
  "caption": "Video sent via Node.js proxy! ðŸŽ¥"
}

###

### 23. Send document/file via Node.js proxy
POST http://localhost:5555/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
  "type": "file"
}

###

### 24. Send contact via Node.js proxy
POST http://localhost:5555/message/send-contact
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "contact_name": "Jane Smith",
  "contact_phone": "5551234567@s.whatsapp.net"
}

###

### 25. Send voice recording via Node.js proxy
POST http://localhost:5555/message/send-voice
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://example.com/voice.ogg"
}

###

### ========================================
### WEBHOOK TESTING
### ========================================

### 26. Test webhook functionality
POST http://localhost:5555/webhook
Content-Type: application/json

{
  "event": "test_message",
  "instance": "abc123def456",
  "timestamp": "2024-01-01T12:00:00Z",
  "data": {
    "from": "1234567890@s.whatsapp.net",
    "message": "Test webhook message",
    "type": "text"
  }
}

###

### 27. Test incoming message webhook
POST http://localhost:5555/webhook
Content-Type: application/json

{
  "event": "message",
  "instance": "abc123def456",
  "timestamp": "2024-01-01T12:00:00Z",
  "data": {
    "from": "1234567890@s.whatsapp.net",
    "message": "hello",
    "type": "text"
  }
}

###

### 28. Test image message webhook
POST http://localhost:5555/webhook
Content-Type: application/json

{
  "event": "message",
  "instance": "abc123def456",
  "timestamp": "2024-01-01T12:00:00Z",
  "data": {
    "from": "1234567890@s.whatsapp.net",
    "message": "https://example.com/image.jpg",
    "type": "image"
  }
}

###

### ========================================
### NODE.JS PROXY MANAGEMENT
### ========================================

### 29. Get scan instructions from Node.js
GET http://localhost:5555/scan

###

### 30. List instances via Node.js proxy
GET http://localhost:5555/instances

###

### 31. Create instance via Node.js proxy
POST http://localhost:5555/instance/create
Content-Type: application/json

###

### 32. Connect instance via Node.js proxy
POST http://localhost:5555/instance/connect
Content-Type: application/json

{
  "instance_key": "abc123def456"
}

###

### 33. Get QR code via Node.js proxy (replace {instanceKey})
GET http://localhost:5555/instance/abc123def456/qr

###

### 34. Check status via Node.js proxy (replace {instanceKey})
GET http://localhost:5555/instance/abc123def456/status

###

### ========================================
### ERROR TESTING
### ========================================

### 35. Test invalid instance key
POST http://localhost:4444/message/send
Content-Type: application/json

{
  "instance_key": "invalid_key",
  "phone": "1234567890@s.whatsapp.net",
  "message": "This should fail"
}

###

### 36. Test invalid phone number format
POST http://localhost:4444/message/send
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890",
  "message": "This should fail due to invalid phone format"
}

###

### 37. Test missing required fields
POST http://localhost:4444/message/send
Content-Type: application/json

{
  "instance_key": "abc123def456"
}

###

### 38. Test invalid media type
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://example.com/file.txt",
  "type": "invalid_type"
}

###

### 39. Test invalid media URL
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://invalid-url-that-does-not-exist.com/image.jpg",
  "type": "image"
}

###

### ========================================
### GROUP MESSAGES
### ========================================

### 40. Send message to group (replace with actual group ID)
POST http://localhost:4444/message/send
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890-1234567890@g.us",
  "message": "Hello group! ðŸ‘¥"
}

###

### 41. Send media to group
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890-1234567890@g.us",
  "url": "https://picsum.photos/400/300",
  "type": "image",
  "caption": "Group image! ðŸ“¸"
}

###

### ========================================
### BULK MESSAGES (Multiple recipients)
### ========================================

### 42. Send to multiple individual numbers
POST http://localhost:4444/message/send
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "message": "Bulk message test"
}

###

### 43. Send media to multiple recipients
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://picsum.photos/400/300",
  "type": "image",
  "caption": "Bulk media message"
}

###

### ========================================
### REPLY MESSAGES
### ========================================

### 44. Reply to a specific message
POST http://localhost:4444/message/send
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "message": "This is a reply to your message",
  "reply_to": "3EB0C767D82B3C2E"
}

###

### 45. Reply with media
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "abc123def456",
  "phone": "1234567890@s.whatsapp.net",
  "url": "https://picsum.photos/400/300",
  "type": "image",
  "caption": "Reply with image",
  "reply_to": "3EB0C767D82B3C2E"
}

###

### ========================================
### HEALTH CHECKS
### ========================================

### 46. Check if Go service is running
GET http://localhost:4444/instances

###

### 47. Check if Node.js service is running
GET http://localhost:5555/scan

###

### ========================================
### VARIABLES FOR TESTING
### ========================================

@instance_key = abc123def456
@phone_number = 1234567890@s.whatsapp.net
@group_id = 1234567890-1234567890@g.us
@test_image = https://picsum.photos/400/300
@test_audio = https://www.soundjay.com/misc/sounds/bell-ringing-05.wav
@test_video = https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4
@test_document = https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf
@test_contact_name = John Doe
@test_contact_phone = 5551234567@s.whatsapp.net
@test_voice_url = https://example.com/voice.ogg

### ========================================
### USING VARIABLES
### ========================================

### 48. Send text using variables
POST http://localhost:4444/message/send
Content-Type: application/json

{
  "instance_key": "{{instance_key}}",
  "phone": "{{phone_number}}",
  "message": "Message using variables! ðŸŽ¯"
}

###

### 49. Send image using variables
POST http://localhost:4444/message/send-media
Content-Type: application/json

{
  "instance_key": "{{instance_key}}",
  "phone": "{{phone_number}}",
  "url": "{{test_image}}",
  "type": "image",
  "caption": "Image using variables! ðŸ“¸"
}

###

### 50. Send contact using variables
POST http://localhost:4444/message/send-contact
Content-Type: application/json

{
  "instance_key": "{{instance_key}}",
  "phone": "{{phone_number}}",
  "contact_name": "{{test_contact_name}}",
  "contact_phone": "{{test_contact_phone}}"
}

###

### 51. Send voice recording using variables
POST http://localhost:4444/message/send-voice
Content-Type: application/json

{
  "instance_key": "{{instance_key}}",
  "phone": "{{phone_number}}",
  "url": "{{test_voice_url}}"
}

###

### ========================================
### NOTES AND TIPS
### ========================================

### IMPORTANT NOTES:
### 1. Replace "abc123def456" with actual instance keys from your system
### 2. Replace "1234567890@s.whatsapp.net" with actual phone numbers
### 3. Phone numbers must include @s.whatsapp.net suffix
### 4. Group IDs must include @g.us suffix
### 5. Media URLs must be publicly accessible
### 6. Instance must be connected before sending messages
### 7. QR code must be scanned before instance is usable

### SUPPORTED MEDIA TYPES:
### - image: JPG, PNG, GIF, etc.
### - audio: MP3, WAV, OGG, etc.
### - video: MP4, AVI, MOV, etc.
### - file: PDF, DOC, TXT, etc.

### ERROR CODES:
### - 400: Bad Request (invalid parameters)
### - 404: Instance not found
### - 500: Internal server error

### TESTING WORKFLOW:
### 1. Create instance (example 1)
### 2. Connect instance (example 2)
### 3. Get QR code (example 3)
### 4. Scan QR code with WhatsApp mobile app
### 5. Check status (example 4)
### 6. Send messages (examples 7-16)
### 7. Test webhooks (examples 17-19)
